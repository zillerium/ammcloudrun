===== ./main.py =====
from flask import Flask
from auth import require_api_key
from routes.xa import register_xa_routes
from routes.upload import register_upload_routes

app = Flask(__name__)

# Security: add API key check before each request
app.before_request(require_api_key)

# Register routes from modules
register_xa_routes(app)
register_upload_routes(app)

if __name__ == "__main__":
    import os
    port = int(os.environ.get("PORT", 8080))
    app.run(debug=True, host="0.0.0.0", port=port)

===== ./Dockerfile =====
FROM python:3.11-slim

WORKDIR /app
COPY . .

RUN pip install -r requirements.txt

CMD ["python", "main.py"]

===== ./requirements.txt =====
flask
===== ./auth.py =====
import os
from flask import request, jsonify

API_KEY = os.environ.get("API_KEY", "changeme")

def require_api_key():
    if request.method == "GET":  # optional: leave GET unprotected
        return None
    key = request.headers.get("x-api-key")
    if key != API_KEY:
        return jsonify({"error": "unauthorized"}), 401

===== ./plotting/cpmm.py =====
import numpy as np
import matplotlib.pyplot as plt

def generate_cpmm_plot(filename="example.png"):
    x0, y0 = 1000, 1000
    k = x0 * y0

    x_values = np.linspace(100, 2000, 10)  # 10 sample points
    y_values = [k / x for x in x_values]

    plt.figure(figsize=(6, 4))
    plt.plot(x_values, y_values, 'b-', linewidth=2, label="CPMM (xy=k)")
    plt.scatter([x0], [y0], color="red", label="Initial point")

    plt.title("Simple CPMM Curve")
    plt.xlabel("Token X Balance")
    plt.ylabel("Token Y Balance")
    plt.legend()
    plt.grid(True, alpha=0.3)

    plt.tight_layout()
    plt.savefig(filename)
    plt.close()

===== ./routes/upload.py =====
import os, requests
from flask import jsonify, request
from plotting.cpmm import generate_cpmm_plot

VERCEL_BLOB_URL = "https://api.vercel.com/v2/blob"
BLOB_TOKEN = os.environ.get("BLOB_READ_WRITE_TOKEN")

def register_upload_routes(app):
    @app.route("/store_image", methods=["POST"])
    def store_image():
        # 1. Generate CPMM plot and save under /tmp
        filename = "/tmp/example.png"
        generate_cpmm_plot(filename)

        # 2. Upload to Vercel Blob
        with open(filename, "rb") as f:
            resp = requests.put(
                f"{VERCEL_BLOB_URL}/example.png",
                headers={
                    "Authorization": f"Bearer {BLOB_TOKEN}",
                    "Content-Type": "image/png",
                },
                data=f
            )

        if resp.status_code != 200:
            return jsonify({"error": "Upload failed", "details": resp.text}), resp.status_code

        return jsonify(resp.json())

===== ./routes/xa.py =====
from flask import request, jsonify

def register_xa_routes(app):
    @app.route("/", methods=["GET"])
    def root():
        return "ðŸ‘‹ Hello World from Python Cloud Run (secured)"

    @app.route("/", methods=["POST"])
    def hello_post():
        data = request.get_json(silent=True) or {}
        x = data.get("x")
        A = data.get("A")
        return jsonify({
            "message": "hello world",
            "x": x,
            "A": A
        })

